template
@before {
  PEG_PUSH_FENCE(@"template");
  return nil;
}
@after {
  NSArray* expressions = PEG_REVERSE_ABOVE(PEG_FENCE(@"template"));
  POP(); // pop fence
  PEG_PUSH_TAG(@"template", expressions);
  return nil;
}
= newline* expression? (newline+ expression)* newline+;

expression = line (newline+ subBlock)?;

line = element;

subBlock = indent newline+ (expression newline+)* dedent {
  NSArray* subBlock = PEG_REVERSE_ABOVE(PEG_FENCE(@"subBlock"));
  POP();
  NSMutableDictionary* element = [POP() mutableCopy];
  element[@"subBlock"] = subBlock;
  PUSH([element copy]);
  //PEG_PUSH_TAG(@"subBlock", subBlock);
  return nil;
};

indent = '{'! 'INDENT'! '}'! {
  PEG_PUSH_FENCE(@"subBlock");
  return nil;
};

dedent = '{'! 'DEDENT'! '}'!;

element = viewElement;

viewElement
@before {
  PEG_PUSH_FENCE(@"viewElement");
  return nil;
}
@after {
  NSArray* tags = PEG_REVERSE_ABOVE(PEG_FENCE(@"viewElement"));
  POP();
  PEG_PUSH_TAG(@"viewElement", tags);
  return nil;
}
 = tag+ attrList?;

tag = viewTag | viewClass | viewId;

viewClass = '.'! Word {
  PEG_PUSH_TAG(@"viewClass", POP_STR());
  return nil;
};

viewId = '#'! Word {
  PEG_PUSH_TAG(@"viewId", POP_STR());
  return nil;
};

viewTag = viewPrimitives {
  PEG_PUSH_TAG(@"viewTag", POP_STR());
  return nil;
};

attrList
@before {
  PEG_PUSH_FENCE(@"attrList");
  return nil;
}
@after {
  NSArray* attrs = PEG_REVERSE_ABOVE(PEG_FENCE(@"attrList"));
  POP(); // pop fence
  PEG_PUSH_TAG(@"attrList", attrs);
  return nil;
}
 ='('! (attr+) ')'!;

attr = attrName '='! attrValue ','!? {
  id attrValue = POP();
  NSString* attrName = POP_STR();
  PEG_PUSH_TAG(@"attr", PEG_DICT(@"attrName": attrName, @"attrValue": attrValue));
  return nil;
};

attrName = Word;

attrValue = variableBindingValue | quotedStringValue;

variableBindingValue
@before {
  PEG_PUSH_FENCE(@"variableBindingValue");
  return nil;
}
@after {
  NSArray *vals = PEG_REVERSE_ABOVE(PEG_FENCE(@"variableBindingValue"));
  POP(); // pop fence
  PEG_PUSH_TAG(@"variableBindingValue", [vals componentsJoinedByString:@""]);
  return nil;
}
= Word ('.' Word)*;

quotedStringValue = QuotedString;

newline = '{'! 'NEWLINE'! '}'!;

viewPrimitives = 'Label' | 'ImageView' | 'TextView' | 'Button' | 'TextField';
